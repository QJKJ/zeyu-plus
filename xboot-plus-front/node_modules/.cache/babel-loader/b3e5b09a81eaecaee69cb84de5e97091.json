{"remainingRequest":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\babel-loader\\lib\\index.js!D:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\zeyu\\zeyu-plus\\xboot-plus-front\\src\\views\\activiti\\process-manage\\processNodeEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\src\\views\\activiti\\process-manage\\processNodeEdit.vue","mtime":1545792990747},{"path":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1545803981415},{"path":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getProcessNode, editNodeUser } from \"@/api/activiti\";\nimport { getUserListData, getAllRoleList, getDictDataByType } from \"@/api/index\";\nexport default {\n  name: \"process_node_edit\",\n  data: function data() {\n    var _this = this;\n\n    return {\n      loading: false,\n      // 表单加载状态\n      nodeLoading: false,\n      userLoading: true,\n      data: [],\n      editTitle: \"\",\n      selectUserCount: 0,\n      selectUsers: [],\n      userModalVisible: false,\n      modalTitle: \"\",\n      // 添加或编辑标题\n      form: {\n        // 添加或编辑表单对象初始化数据\n        title: \"\",\n        content: \"\",\n        type: null,\n        roles: []\n      },\n      roleList: [],\n      searchUserForm: {\n        username: \"\",\n        type: \"\",\n        status: \"\",\n        pageNumber: 1,\n        // 当前页数\n        pageSize: 9,\n        // 页面大小\n        sort: \"createTime\",\n        // 默认排序字段\n        order: \"desc\" // 默认排序方式\n\n      },\n      formValidate: {// 表单验证规则\n      },\n      submitLoading: false,\n      // 添加或编辑提交状态\n      chooseRole: false,\n      chooseUser: false,\n      userColumns: [{\n        type: \"index\",\n        width: 60,\n        align: \"center\"\n      }, {\n        title: \"用户名\",\n        key: \"username\",\n        width: 145,\n        sortable: true\n      }, {\n        title: \"头像\",\n        key: \"avatar\",\n        width: 80,\n        align: \"center\",\n        render: function render(h, params) {\n          return h(\"Avatar\", {\n            props: {\n              src: params.row.avatar\n            }\n          });\n        }\n      }, {\n        title: \"所属部门\",\n        key: \"departmentTitle\",\n        width: 120\n      }, {\n        title: \"手机\",\n        key: \"mobile\",\n        width: 115,\n        sortable: true\n      }, {\n        title: \"邮箱\",\n        key: \"email\",\n        width: 180,\n        sortable: true\n      }, {\n        title: \"性别\",\n        key: \"sex\",\n        width: 70,\n        align: \"center\",\n        render: function render(h, params) {\n          var re = \"\";\n\n          _this.dictSex.forEach(function (e) {\n            if (e.value == params.row.sex) {\n              re = e.title;\n            }\n          });\n\n          return h(\"div\", re);\n        }\n      }, {\n        title: \"用户类型\",\n        key: \"type\",\n        align: \"center\",\n        width: 100,\n        render: function render(h, params) {\n          var re = \"\";\n\n          if (params.row.type === 1) {\n            re = \"管理员\";\n          } else if (params.row.type === 0) {\n            re = \"普通用户\";\n          }\n\n          return h(\"div\", re);\n        }\n      }, {\n        title: \"状态\",\n        key: \"status\",\n        align: \"center\",\n        width: 120,\n        render: function render(h, params) {\n          if (params.row.status === 0) {\n            return h(\"div\", [h(\"Tag\", {\n              props: {\n                color: \"green\"\n              }\n            }, \"正常启用\")]);\n          } else if (params.row.status === -1) {\n            return h(\"div\", [h(\"Tag\", {\n              props: {\n                color: \"red\"\n              }\n            }, \"禁用\")]);\n          }\n        }\n      }, {\n        title: \"创建时间\",\n        key: \"createTime\",\n        sortable: true,\n        sortType: \"desc\",\n        width: 150\n      }, {\n        title: \"操作\",\n        key: \"action\",\n        width: 130,\n        align: \"center\",\n        fixed: \"right\",\n        render: function render(h, params) {\n          return h(\"div\", [h(\"Button\", {\n            props: {\n              type: \"info\",\n              size: \"small\"\n            },\n            on: {\n              click: function click() {\n                _this.selectUser(params.row);\n              }\n            }\n          }, \"添加该用户\")]);\n        }\n      }],\n      userData: [],\n      totalUser: 0,\n      dictNodeType: [],\n      dictSex: [],\n      backRoute: \"\",\n      processName: \"\",\n      processId: \"\"\n    };\n  },\n  methods: {\n    init: function init() {\n      this.getUserDataList();\n      this.getDictDataType();\n      this.getRoleList();\n      this.backRoute = this.$route.query.backRoute;\n      this.processId = this.$route.query.id;\n      this.processName = this.$route.query.name;\n    },\n    getDictDataType: function getDictDataType() {\n      var _this2 = this;\n\n      getDictDataByType(\"process_node_type\").then(function (res) {\n        if (res.success) {\n          _this2.dictNodeType = res.result;\n\n          _this2.getData();\n        }\n      }); // 获取性别字典数据\n\n      getDictDataByType(\"sex\").then(function (res) {\n        if (res.success) {\n          _this2.dictSex = res.result;\n        }\n      });\n    },\n    getRoleList: function getRoleList() {\n      var _this3 = this;\n\n      getAllRoleList().then(function (res) {\n        if (res.success === true) {\n          _this3.roleList = res.result;\n        }\n      });\n    },\n    getData: function getData() {\n      var _this4 = this;\n\n      this.loading = true;\n      getProcessNode(this.processId).then(function (res) {\n        _this4.loading = false;\n\n        if (res.success === true) {\n          // 转换null为\"\"\n          var v = res.result;\n\n          for (var attr in v) {\n            if (v[attr] === null) {\n              v[attr] = \"\";\n            }\n          }\n\n          var str = JSON.stringify(v);\n          var data = JSON.parse(str);\n          data.forEach(function (e) {\n            _this4.dictNodeType.forEach(function (t) {\n              t.value = Number(t.value);\n\n              if (!e.title && e.type == t.value) {\n                e.title = t.title;\n              }\n            });\n          });\n          _this4.data = data;\n        }\n      });\n    },\n    renderContent: function renderContent(h, _ref) {\n      var _this5 = this;\n\n      var root = _ref.root,\n          node = _ref.node,\n          data = _ref.data;\n      var color = \"\",\n          word = \"\";\n\n      if (data.type == 0) {\n        color = \"#47cb89\";\n        word = \"开\";\n      } else if (data.type == 1) {\n        color = \"#2db7f5\";\n        word = \"审\";\n      } else if (data.type == 2) {\n        word = \"结\";\n      } else {\n        color = \"#f90\";\n        word = \"其他\";\n      }\n\n      return h(\"span\", {\n        style: {\n          display: \"inline-block\",\n          cursor: \"pointer\"\n        },\n        on: {\n          click: function click() {\n            _this5.selectTree(data);\n          }\n        }\n      }, [h(\"span\", [h(\"Avatar\", {\n        props: {\n          size: \"small\"\n        },\n        style: {\n          background: color,\n          \"margin-right\": \"5px\"\n        }\n      }, word), h(\"span\", data.title)])]);\n    },\n    selectTree: function selectTree(v) {\n      if (v) {\n        // 转换null为\"\"\n        for (var attr in v) {\n          if (v[attr] === null) {\n            v[attr] = \"\";\n          }\n        }\n\n        var str = JSON.stringify(v);\n        var data = JSON.parse(str);\n        this.selectUsers = data.users;\n        this.selectUserCount = data.users.length;\n        this.editTitle = data.title;\n\n        if (data.users && data.users.length > 0) {\n          this.chooseUser = true;\n        } else {\n          this.chooseUser = false;\n        }\n\n        if (data.roles && data.roles.length > 0) {\n          this.chooseRole = true;\n          var roleIds = [];\n          data.roles.forEach(function (e) {\n            roleIds.push(e.id);\n          });\n          data.roles = roleIds;\n        } else {\n          this.chooseRole = false;\n        }\n\n        this.form = data;\n      } else {\n        this.cancelEdit();\n      }\n    },\n    cancelEdit: function cancelEdit() {\n      var data = this.$refs.tree.getSelectedNodes()[0];\n\n      if (data) {\n        data.selected = false;\n      }\n\n      this.isMenu = false;\n      this.isButton = false;\n      this.$refs.form.resetFields();\n      delete this.form.id;\n      this.editTitle = \"\";\n    },\n    changeUserPage: function changeUserPage(v) {\n      this.searchUserForm.pageNumber = v;\n      this.getUserDataList();\n    },\n    changeUserPageSize: function changeUserPageSize(v) {\n      this.searchUserForm.pageSize = v;\n      this.getUserDataList();\n    },\n    getUserDataList: function getUserDataList() {\n      var _this6 = this;\n\n      this.userLoading = true;\n      getUserListData(this.searchUserForm).then(function (res) {\n        _this6.userLoading = false;\n\n        if (res.success === true) {\n          _this6.userData = res.result.content;\n          _this6.totalUser = res.result.totalElements;\n        }\n      });\n    },\n    handleSearchUser: function handleSearchUser() {\n      this.searchUserForm.pageNumber = 1;\n      this.searchUserForm.pageSize = 9;\n      this.getUserDataList();\n    },\n    handleResetUser: function handleResetUser() {\n      this.$refs.searchUserForm.resetFields();\n      this.searchUserForm.pageNumber = 1;\n      this.searchUserForm.pageSize = 9; // 重新加载数据\n\n      this.getUserDataList();\n    },\n    handelSubmit: function handelSubmit() {\n      var _this7 = this;\n\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          _this7.submitLoading = true; // 用户id数据\n\n          var ids = [];\n\n          _this7.selectUsers.forEach(function (e) {\n            ids += e.id + \",\";\n          });\n\n          if (ids.length > 0) {\n            ids = ids.substring(0, ids.length - 1);\n          }\n\n          _this7.form.nodeId = _this7.form.id;\n\n          if (_this7.chooseUser) {\n            _this7.form.userIds = ids;\n          } else {\n            _this7.form.userIds = [];\n          }\n\n          if (_this7.chooseRole) {\n            _this7.form.roleIds = _this7.form.roles;\n          } else {\n            _this7.form.roleIds = [];\n          }\n\n          editNodeUser(_this7.form).then(function (res) {\n            _this7.submitLoading = false;\n\n            if (res.success) {\n              _this7.$Message.success(\"操作成功\");\n\n              _this7.getData();\n            }\n          });\n        }\n      });\n    },\n    clickRole: function clickRole(v) {\n      this.chooseRole = v;\n    },\n    clickUser: function clickUser(v) {\n      this.chooseUser = v;\n    },\n    selectUser: function selectUser(v) {\n      // 去重\n      var that = this;\n      var flag = true;\n      this.selectUsers.forEach(function (e) {\n        if (v.id == e.id) {\n          that.$Message.warning(\"已经添加该用户，请勿重复选择\");\n          flag = false;\n        }\n      });\n\n      if (flag) {\n        var u = {\n          id: v.id,\n          username: v.username\n        };\n        this.selectUsers.push(u);\n        this.selectUserCount += 1;\n        this.$Message.success(\"选择成功\");\n      }\n    },\n    handleCancelUser: function handleCancelUser(e, id) {\n      // 删除所选用户\n      var newArray = [];\n      this.selectUsers.forEach(function (e) {\n        if (id != e.id) {\n          newArray.push(e);\n        }\n      });\n      this.selectUsers = newArray;\n      this.selectUserCount = newArray.length;\n      this.$Message.success(\"删除所选用户成功\");\n    },\n    clearSelectAllUser: function clearSelectAllUser() {\n      this.selectUserCount = 0;\n      this.selectUsers = [];\n    },\n    // 关闭当前页面\n    closeCurrentPage: function closeCurrentPage() {\n      this.$store.commit(\"removeTag\", \"process_node_edit\");\n      localStorage.pageOpenedList = JSON.stringify(this.$store.state.app.pageOpenedList);\n      this.$router.push({\n        name: this.backRoute\n      });\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  watch: {\n    // 监听路由变化\n    $route: function $route(to, from) {\n      if (to.name == \"process_node_edit\") {\n        this.init();\n      }\n    }\n  }\n};",{"version":3,"sources":["processNodeEdit.vue"],"names":[],"mappings":"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","sourcesContent":["<style lang=\"less\">\r\n@import \"./processManage.less\";\r\n</style>\r\n<template>\r\n  <div class=\"search\">\r\n    <Row>\r\n      <Col>\r\n        <Card>\r\n          <p slot=\"title\">{{processName}} 流程节点设置</p>\r\n          <Row type=\"flex\" justify=\"start\" class=\"code-row-bg\">\r\n            <Col span=\"6\">\r\n              <Alert show-icon>\r\n                当前选择编辑：\r\n                <span class=\"select-title\">{{editTitle}}</span>\r\n                <a class=\"select-clear\" v-if=\"form.id\" @click=\"cancelEdit\">取消选择</a>\r\n              </Alert>\r\n              <div class=\"tree-bar\">\r\n                <Tree\r\n                  ref=\"tree\"\r\n                  :data=\"data\"\r\n                  :render=\"renderContent\"\r\n                  @on-select-change=\"selectTree\"\r\n                ></Tree>\r\n              </div>\r\n              <Spin size=\"large\" fix v-if=\"loading\"></Spin>\r\n            </Col>\r\n            <Col span=\"9\">\r\n              <Form\r\n                ref=\"form\"\r\n                :model=\"form\"\r\n                :label-width=\"90\"\r\n                :rules=\"formValidate\"\r\n                style=\"position:relative\"\r\n              >\r\n                <FormItem label=\"节点名称\" prop=\"title\">{{form.title}}</FormItem>\r\n                <Form-item label=\"节点类型\" prop=\"type\">\r\n                  <Select v-model=\"form.type\" disabled placeholder>\r\n                    <Option\r\n                      v-for=\"(item, i) in dictNodeType\"\r\n                      :key=\"i\"\r\n                      :value=\"item.value\"\r\n                    >{{item.title}}</Option>\r\n                  </Select>\r\n                </Form-item>\r\n                <div v-if=\"form.type==1\">\r\n                  <FormItem label=\"可审批人员\">\r\n                    <Checkbox v-model=\"chooseRole\" label=\"0\" @on-change=\"clickRole\">\r\n                      <Icon type=\"md-people\" size=\"14\" style=\"margin:0 2px 2px 0\"></Icon>\r\n                      <span>根据角色选择</span>\r\n                    </Checkbox>\r\n                    <Checkbox v-model=\"chooseUser\" label=\"1\" @on-change=\"clickUser\">\r\n                      <Icon type=\"md-person\" style=\"margin:0 2px 2px 0\"></Icon>\r\n                      <span>直接选择人员</span>\r\n                    </Checkbox>\r\n                  </FormItem>\r\n                  <FormItem label=\"选择角色\" v-if=\"chooseRole\">\r\n                    <Select v-model=\"form.roles\" multiple>\r\n                      <Option\r\n                        v-for=\"item in roleList\"\r\n                        :value=\"item.id\"\r\n                        :key=\"item.id\"\r\n                        :label=\"item.name\"\r\n                      >\r\n                        <span style=\"margin-right:10px;\">{{ item.name }}</span>\r\n                        <span style=\"color:#ccc;\">{{ item.description }}</span>\r\n                      </Option>\r\n                    </Select>\r\n                  </FormItem>\r\n                  <div v-if=\"chooseUser\">\r\n                    <FormItem label=\"选择用户\">\r\n                      <Button @click=\"userModalVisible=true\" icon=\"md-person-add\">选择用户</Button>\r\n                    </FormItem>\r\n                    <FormItem label>\r\n                      <Collapse simple>\r\n                        <Panel name=\"1\">\r\n                          已选择\r\n                          <span class=\"select-count\">{{selectUserCount}}</span> 人\r\n                          <p slot=\"content\">\r\n                            <Tag\r\n                              v-for=\"(item, i) in selectUsers\"\r\n                              :key=\"i\"\r\n                              :name=\"item.id\"\r\n                              color=\"default\"\r\n                              closable\r\n                              @on-close=\"handleCancelUser\"\r\n                            >{{item.username}}</Tag>\r\n                          </p>\r\n                        </Panel>\r\n                      </Collapse>\r\n                    </FormItem>\r\n                  </div>\r\n                </div>\r\n                <Form-item class=\"br\">\r\n                  <Button\r\n                    type=\"primary\"\r\n                    :loading=\"submitLoading\"\r\n                    @click=\"handelSubmit\"\r\n                    icon=\"ios-create-outline\"\r\n                  >保存并提交</Button>\r\n                  <Button @click=\"closeCurrentPage\">关闭</Button>\r\n                </Form-item>\r\n                <Spin size=\"large\" fix v-if=\"nodeLoading\"></Spin>\r\n              </Form>\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    <!-- Drawer抽屉式选择用户 -->\r\n    <Drawer title=\"选择用户\" closable v-model=\"userModalVisible\" width=\"800\">\r\n      <Form\r\n        ref=\"searchUserForm\"\r\n        :model=\"searchUserForm\"\r\n        inline\r\n        :label-width=\"55\"\r\n        class=\"search-form\"\r\n      >\r\n        <Form-item label=\"用户名\" prop=\"username\">\r\n          <Input\r\n            type=\"text\"\r\n            v-model=\"searchUserForm.username\"\r\n            clearable\r\n            placeholder=\"请输入用户名\"\r\n            style=\"width: 200px\"\r\n          />\r\n        </Form-item>\r\n        <Form-item style=\"margin-left:-35px;\" class=\"br\">\r\n          <Button @click=\"handleSearchUser\" type=\"primary\" icon=\"ios-search\">搜索</Button>\r\n          <Button @click=\"handleResetUser\">重置</Button>\r\n        </Form-item>\r\n      </Form>\r\n      <Table :loading=\"userLoading\" border :columns=\"userColumns\" :data=\"userData\" ref=\"userTable\"></Table>\r\n      <Row type=\"flex\" justify=\"end\" class=\"code-row-bg page\" style=\"margin: 10px 0;\">\r\n        <Page\r\n          :current=\"searchUserForm.pageNumber\"\r\n          :total=\"totalUser\"\r\n          :page-size=\"searchUserForm.pageSize\"\r\n          @on-change=\"changeUserPage\"\r\n          @on-page-size-change=\"changeUserPageSize\"\r\n          :page-size-opts=\"[9,18,36]\"\r\n          size=\"small\"\r\n          show-total\r\n          show-elevator\r\n          show-sizer\r\n        ></Page>\r\n      </Row>\r\n      <div class=\"drawer-footer\">\r\n        已选择\r\n        <span class=\"select-count\">{{selectUserCount}}</span> 人\r\n        <Button @click=\"clearSelectAllUser\" style=\"margin-left:10px\">清空已选</Button>\r\n        <Button @click=\"userModalVisible=false\" style=\"margin-left:5px\" type=\"primary\">关闭</Button>\r\n      </div>\r\n    </Drawer>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getProcessNode, editNodeUser } from \"@/api/activiti\";\r\nimport {\r\n  getUserListData,\r\n  getAllRoleList,\r\n  getDictDataByType\r\n} from \"@/api/index\";\r\nexport default {\r\n  name: \"process_node_edit\",\r\n  data() {\r\n    return {\r\n      loading: false, // 表单加载状态\r\n      nodeLoading: false,\r\n      userLoading: true,\r\n      data: [],\r\n      editTitle: \"\",\r\n      selectUserCount: 0,\r\n      selectUsers: [],\r\n      userModalVisible: false,\r\n      modalTitle: \"\", // 添加或编辑标题\r\n      form: {\r\n        // 添加或编辑表单对象初始化数据\r\n        title: \"\",\r\n        content: \"\",\r\n        type: null,\r\n        roles: []\r\n      },\r\n      roleList: [],\r\n      searchUserForm: {\r\n        username: \"\",\r\n        type: \"\",\r\n        status: \"\",\r\n        pageNumber: 1, // 当前页数\r\n        pageSize: 9, // 页面大小\r\n        sort: \"createTime\", // 默认排序字段\r\n        order: \"desc\" // 默认排序方式\r\n      },\r\n      formValidate: {\r\n        // 表单验证规则\r\n      },\r\n      submitLoading: false, // 添加或编辑提交状态\r\n      chooseRole: false,\r\n      chooseUser: false,\r\n      userColumns: [\r\n        {\r\n          type: \"index\",\r\n          width: 60,\r\n          align: \"center\"\r\n        },\r\n        {\r\n          title: \"用户名\",\r\n          key: \"username\",\r\n          width: 145,\r\n          sortable: true\r\n        },\r\n        {\r\n          title: \"头像\",\r\n          key: \"avatar\",\r\n          width: 80,\r\n          align: \"center\",\r\n          render: (h, params) => {\r\n            return h(\"Avatar\", {\r\n              props: {\r\n                src: params.row.avatar\r\n              }\r\n            });\r\n          }\r\n        },\r\n        {\r\n          title: \"所属部门\",\r\n          key: \"departmentTitle\",\r\n          width: 120\r\n        },\r\n        {\r\n          title: \"手机\",\r\n          key: \"mobile\",\r\n          width: 115,\r\n          sortable: true\r\n        },\r\n        {\r\n          title: \"邮箱\",\r\n          key: \"email\",\r\n          width: 180,\r\n          sortable: true\r\n        },\r\n        {\r\n          title: \"性别\",\r\n          key: \"sex\",\r\n          width: 70,\r\n          align: \"center\",\r\n          render: (h, params) => {\r\n            let re = \"\";\r\n            this.dictSex.forEach(e => {\r\n              if (e.value == params.row.sex) {\r\n                re = e.title;\r\n              }\r\n            });\r\n            return h(\"div\", re);\r\n          }\r\n        },\r\n        {\r\n          title: \"用户类型\",\r\n          key: \"type\",\r\n          align: \"center\",\r\n          width: 100,\r\n          render: (h, params) => {\r\n            let re = \"\";\r\n            if (params.row.type === 1) {\r\n              re = \"管理员\";\r\n            } else if (params.row.type === 0) {\r\n              re = \"普通用户\";\r\n            }\r\n            return h(\"div\", re);\r\n          }\r\n        },\r\n        {\r\n          title: \"状态\",\r\n          key: \"status\",\r\n          align: \"center\",\r\n          width: 120,\r\n          render: (h, params) => {\r\n            if (params.row.status === 0) {\r\n              return h(\"div\", [\r\n                h(\r\n                  \"Tag\",\r\n                  {\r\n                    props: {\r\n                      color: \"green\"\r\n                    }\r\n                  },\r\n                  \"正常启用\"\r\n                )\r\n              ]);\r\n            } else if (params.row.status === -1) {\r\n              return h(\"div\", [\r\n                h(\r\n                  \"Tag\",\r\n                  {\r\n                    props: {\r\n                      color: \"red\"\r\n                    }\r\n                  },\r\n                  \"禁用\"\r\n                )\r\n              ]);\r\n            }\r\n          }\r\n        },\r\n        {\r\n          title: \"创建时间\",\r\n          key: \"createTime\",\r\n          sortable: true,\r\n          sortType: \"desc\",\r\n          width: 150\r\n        },\r\n        {\r\n          title: \"操作\",\r\n          key: \"action\",\r\n          width: 130,\r\n          align: \"center\",\r\n          fixed: \"right\",\r\n          render: (h, params) => {\r\n            return h(\"div\", [\r\n              h(\r\n                \"Button\",\r\n                {\r\n                  props: {\r\n                    type: \"info\",\r\n                    size: \"small\"\r\n                  },\r\n                  on: {\r\n                    click: () => {\r\n                      this.selectUser(params.row);\r\n                    }\r\n                  }\r\n                },\r\n                \"添加该用户\"\r\n              )\r\n            ]);\r\n          }\r\n        }\r\n      ],\r\n      userData: [],\r\n      totalUser: 0,\r\n      dictNodeType: [],\r\n      dictSex: [],\r\n      backRoute: \"\",\r\n      processName: \"\",\r\n      processId: \"\"\r\n    };\r\n  },\r\n  methods: {\r\n    init() {\r\n      this.getUserDataList();\r\n      this.getDictDataType();\r\n      this.getRoleList();\r\n      this.backRoute = this.$route.query.backRoute;\r\n      this.processId = this.$route.query.id;\r\n      this.processName = this.$route.query.name;\r\n    },\r\n    getDictDataType() {\r\n      getDictDataByType(\"process_node_type\").then(res => {\r\n        if (res.success) {\r\n          this.dictNodeType = res.result;\r\n          this.getData();\r\n        }\r\n      });\r\n      // 获取性别字典数据\r\n      getDictDataByType(\"sex\").then(res => {\r\n        if (res.success) {\r\n          this.dictSex = res.result;\r\n        }\r\n      });\r\n    },\r\n    getRoleList() {\r\n      getAllRoleList().then(res => {\r\n        if (res.success === true) {\r\n          this.roleList = res.result;\r\n        }\r\n      });\r\n    },\r\n    getData() {\r\n      this.loading = true;\r\n      getProcessNode(this.processId).then(res => {\r\n        this.loading = false;\r\n        if (res.success === true) {\r\n          // 转换null为\"\"\r\n          let v = res.result;\r\n          for (let attr in v) {\r\n            if (v[attr] === null) {\r\n              v[attr] = \"\";\r\n            }\r\n          }\r\n          let str = JSON.stringify(v);\r\n          let data = JSON.parse(str);\r\n          data.forEach(e => {\r\n            this.dictNodeType.forEach(t => {\r\n              t.value = Number(t.value);\r\n              if (!e.title && e.type == t.value) {\r\n                e.title = t.title;\r\n              }\r\n            });\r\n          });\r\n          this.data = data;\r\n        }\r\n      });\r\n    },\r\n    renderContent(h, { root, node, data }) {\r\n      let color = \"\",\r\n        word = \"\";\r\n      if (data.type == 0) {\r\n        color = \"#47cb89\";\r\n        word = \"开\";\r\n      } else if (data.type == 1) {\r\n        color = \"#2db7f5\";\r\n        word = \"审\";\r\n      } else if (data.type == 2) {\r\n        word = \"结\";\r\n      } else {\r\n        color = \"#f90\";\r\n        word = \"其他\";\r\n      }\r\n      return h(\r\n        \"span\",\r\n        {\r\n          style: {\r\n            display: \"inline-block\",\r\n            cursor: \"pointer\"\r\n          },\r\n          on: {\r\n            click: () => {\r\n              this.selectTree(data);\r\n            }\r\n          }\r\n        },\r\n        [\r\n          h(\"span\", [\r\n            h(\r\n              \"Avatar\",\r\n              {\r\n                props: {\r\n                  size: \"small\"\r\n                },\r\n                style: {\r\n                  background: color,\r\n                  \"margin-right\": \"5px\"\r\n                }\r\n              },\r\n              word\r\n            ),\r\n            h(\"span\", data.title)\r\n          ])\r\n        ]\r\n      );\r\n    },\r\n    selectTree(v) {\r\n      if (v) {\r\n        // 转换null为\"\"\r\n        for (let attr in v) {\r\n          if (v[attr] === null) {\r\n            v[attr] = \"\";\r\n          }\r\n        }\r\n        let str = JSON.stringify(v);\r\n        let data = JSON.parse(str);\r\n        this.selectUsers = data.users;\r\n        this.selectUserCount = data.users.length;\r\n        this.editTitle = data.title;\r\n        if (data.users && data.users.length > 0) {\r\n          this.chooseUser = true;\r\n        } else {\r\n          this.chooseUser = false;\r\n        }\r\n        if (data.roles && data.roles.length > 0) {\r\n          this.chooseRole = true;\r\n          let roleIds = [];\r\n          data.roles.forEach(e => {\r\n            roleIds.push(e.id);\r\n          });\r\n          data.roles = roleIds;\r\n        } else {\r\n          this.chooseRole = false;\r\n        }\r\n        this.form = data;\r\n      } else {\r\n        this.cancelEdit();\r\n      }\r\n    },\r\n    cancelEdit() {\r\n      let data = this.$refs.tree.getSelectedNodes()[0];\r\n      if (data) {\r\n        data.selected = false;\r\n      }\r\n      this.isMenu = false;\r\n      this.isButton = false;\r\n      this.$refs.form.resetFields();\r\n      delete this.form.id;\r\n      this.editTitle = \"\";\r\n    },\r\n    changeUserPage(v) {\r\n      this.searchUserForm.pageNumber = v;\r\n      this.getUserDataList();\r\n    },\r\n    changeUserPageSize(v) {\r\n      this.searchUserForm.pageSize = v;\r\n      this.getUserDataList();\r\n    },\r\n    getUserDataList() {\r\n      this.userLoading = true;\r\n      getUserListData(this.searchUserForm).then(res => {\r\n        this.userLoading = false;\r\n        if (res.success === true) {\r\n          this.userData = res.result.content;\r\n          this.totalUser = res.result.totalElements;\r\n        }\r\n      });\r\n    },\r\n    handleSearchUser() {\r\n      this.searchUserForm.pageNumber = 1;\r\n      this.searchUserForm.pageSize = 9;\r\n      this.getUserDataList();\r\n    },\r\n    handleResetUser() {\r\n      this.$refs.searchUserForm.resetFields();\r\n      this.searchUserForm.pageNumber = 1;\r\n      this.searchUserForm.pageSize = 9;\r\n      // 重新加载数据\r\n      this.getUserDataList();\r\n    },\r\n    handelSubmit() {\r\n      this.$refs.form.validate(valid => {\r\n        if (valid) {\r\n          this.submitLoading = true;\r\n          // 用户id数据\r\n          let ids = [];\r\n          this.selectUsers.forEach(e => {\r\n            ids += e.id + \",\";\r\n          });\r\n          if (ids.length > 0) {\r\n            ids = ids.substring(0, ids.length - 1);\r\n          }\r\n          this.form.nodeId = this.form.id;\r\n          if (this.chooseUser) {\r\n            this.form.userIds = ids;\r\n          } else {\r\n            this.form.userIds = [];\r\n          }\r\n          if (this.chooseRole) {\r\n            this.form.roleIds = this.form.roles;\r\n          } else {\r\n            this.form.roleIds = [];\r\n          }\r\n          editNodeUser(this.form).then(res => {\r\n            this.submitLoading = false;\r\n            if (res.success) {\r\n              this.$Message.success(\"操作成功\");\r\n              this.getData();\r\n            }\r\n          });\r\n        }\r\n      });\r\n    },\r\n    clickRole(v) {\r\n      this.chooseRole = v;\r\n    },\r\n    clickUser(v) {\r\n      this.chooseUser = v;\r\n    },\r\n    selectUser(v) {\r\n      // 去重\r\n      let that = this;\r\n      let flag = true;\r\n      this.selectUsers.forEach(e => {\r\n        if (v.id == e.id) {\r\n          that.$Message.warning(\"已经添加该用户，请勿重复选择\");\r\n          flag = false;\r\n        }\r\n      });\r\n      if (flag) {\r\n        let u = {\r\n          id: v.id,\r\n          username: v.username\r\n        };\r\n        this.selectUsers.push(u);\r\n        this.selectUserCount += 1;\r\n        this.$Message.success(\"选择成功\");\r\n      }\r\n    },\r\n    handleCancelUser(e, id) {\r\n      // 删除所选用户\r\n      let newArray = [];\r\n      this.selectUsers.forEach(e => {\r\n        if (id != e.id) {\r\n          newArray.push(e);\r\n        }\r\n      });\r\n      this.selectUsers = newArray;\r\n      this.selectUserCount = newArray.length;\r\n      this.$Message.success(\"删除所选用户成功\");\r\n    },\r\n    clearSelectAllUser() {\r\n      this.selectUserCount = 0;\r\n      this.selectUsers = [];\r\n    },\r\n    // 关闭当前页面\r\n    closeCurrentPage() {\r\n      this.$store.commit(\"removeTag\", \"process_node_edit\");\r\n      localStorage.pageOpenedList = JSON.stringify(\r\n        this.$store.state.app.pageOpenedList\r\n      );\r\n      this.$router.push({\r\n        name: this.backRoute\r\n      });\r\n    }\r\n  },\r\n  mounted() {\r\n    this.init();\r\n  },\r\n  watch: {\r\n    // 监听路由变化\r\n    $route(to, from) {\r\n      if (to.name == \"process_node_edit\") {\r\n        this.init();\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>"],"sourceRoot":"src\\views\\activiti\\process-manage"}]}
{"remainingRequest":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\babel-loader\\lib\\index.js!D:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\zeyu\\zeyu-plus\\xboot-plus-front\\src\\views\\my-components\\xboot-tree-table\\xboot-tree-table.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\src\\views\\my-components\\xboot-tree-table\\xboot-tree-table.vue","mtime":1545792990765},{"path":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1545803981415},{"path":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"D:\\\\zeyu\\\\zeyu-plus\\\\xboot-plus-front\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport XbootTreeTableHeader from \"./xboot-tree-table-header\";\nimport { Tree } from \"iview\";\nimport \"./iview-reset.less\";\nvar BORDER_WIDTH = 1;\nvar ARROW_WIDTH = 24;\nvar CHECKBOX_WIDTH = 22;\nvar INDENT_DEFAULT = 18;\nvar EVENTS = [\"on-select-change\", \"on-check-change\", \"on-toggle-expand\"];\nexport default {\n  name: \"xboot-tree-table\",\n  components: {\n    XbootTreeTableHeader: XbootTreeTableHeader\n  },\n  props: _objectSpread({}, Tree.props, {\n    treeWidth: {\n      type: String,\n      default: \"100%\"\n    },\n    treeData: Array\n  }),\n  data: function data() {\n    return {\n      columns: [],\n      widthArray: []\n    };\n  },\n  mounted: function mounted() {\n    this.getColumnLevel(this.treeData);\n  },\n  computed: {\n    headerWidthArray: function headerWidthArray() {\n      var _this = this;\n\n      // 没有设置宽度的列总数\n      var noWidthCount = this.columns.filter(function (n) {\n        return !n.width;\n      }).length; // 已分配了多少像素宽度\n\n      var assignedWidthPx = 0; // 已分配了百分比宽度\n\n      var assignedWidthPercent = 0; // 计算已分配了多少宽度\n\n      this.columns.forEach(function (n) {\n        if (n.width) {\n          if (typeof n.width === \"number\" || n.width.includes(\"px\")) {\n            assignedWidthPx += Number.parseInt(n.width) + BORDER_WIDTH;\n          } else if (n.width.includes(\"%\")) {\n            assignedWidthPercent += Number.parseInt(n.width) + BORDER_WIDTH;\n          }\n        }\n      }); // 是否有checkbox的偏移值\n\n      var diff = CHECKBOX_WIDTH; // 有checkbox，加上checkbox占用的宽度\n\n      if (this.showCheckbox) {\n        assignedWidthPx += CHECKBOX_WIDTH + ARROW_WIDTH;\n      } else {\n        assignedWidthPx += ARROW_WIDTH;\n        diff = 0;\n      } // 计算每列应该展示的宽度\n\n\n      return this.columns.map(function (column, index) {\n        // 有制定宽度\n        if (column.width) {\n          if (index === 0) {\n            // 第一列需要加上箭头和checkbox占用的宽度\n            return \"calc(\".concat(column.width, \" + \").concat(diff + ARROW_WIDTH, \"px)\");\n          } else {\n            // 最后一列需要减去每列的边框线宽度\n            if (index === _this.columns.length - 1) {\n              return \"calc(\".concat(column.width, \")\");\n            } else {\n              return \"calc(\".concat(column.width, \")\");\n            }\n          }\n        } else {\n          if (index === 0) {\n            // 第一列需要加上箭头和checkbox占用的宽度\n            return \"calc((100% - \".concat(assignedWidthPercent, \"% - \").concat(assignedWidthPx, \"px) / \").concat(noWidthCount, \" + \").concat(diff + ARROW_WIDTH, \"px)\");\n          } else {\n            if (index === _this.columns.length - 1) {\n              // 最后一列需要减去每列的边框线宽度\n              return \"calc((100% - \".concat(assignedWidthPercent, \"% - \").concat(assignedWidthPx, \"px) / \").concat(noWidthCount, \" - \").concat(_this.columns.length, \"px)\");\n            } else {\n              return \"calc((100% - \".concat(assignedWidthPercent, \"% - \").concat(assignedWidthPx, \"px) / \").concat(noWidthCount, \")\");\n            }\n          }\n        }\n      });\n    }\n  },\n  methods: {\n    getColumnWidthArray: function getColumnWidthArray(level) {\n      // 没有设置宽度的列总数\n      var noWidthCount = this.columns.filter(function (n) {\n        return !n.width;\n      }).length; // 已分配了多少像素宽度\n\n      var assignedWidthPx = 0; // 已分配了百分比宽度\n\n      var assignedWidthPercent = 0; // 当前层级缩进的宽度\n\n      var indent = (level - 1) * (this.indent || INDENT_DEFAULT); // 计算已分配了多少宽度\n\n      this.columns.forEach(function (n) {\n        if (n.width) {\n          if (typeof n.width === \"number\" || n.width.includes(\"px\")) {\n            assignedWidthPx += Number.parseInt(n.width) + BORDER_WIDTH;\n          } else if (n.width.includes(\"%\")) {\n            assignedWidthPercent += Number.parseInt(n.width) + BORDER_WIDTH;\n          }\n        }\n      }); // 计算每列应该展示的宽度\n\n      return this.columns.map(function (column, index) {\n        // 如果属性指定了宽度\n        if (column.width) {\n          // 第一列需要减去树层级缩进的宽度\n          if (index === 0) {\n            return \"calc(\".concat(column.width, \" - \").concat(indent + 6, \"px)\");\n          } else {\n            return column.width;\n          }\n        } else {\n          // 如果列没有制定宽度，没宽度的列平均分配剩余的宽度，第一列需要减去树层级缩进的宽度\n          if (index === 0) {\n            return \"calc((100% - \".concat(assignedWidthPercent, \"% - \").concat(assignedWidthPx - indent, \"px) / \").concat(noWidthCount, \" -  \").concat(indent, \"px)\");\n          } else {\n            return \"calc((100% - \".concat(assignedWidthPercent, \"% - \").concat(assignedWidthPx - indent, \"px) / \").concat(noWidthCount, \")\");\n          }\n        }\n      });\n    },\n\n    /**\r\n     * 给树添加层级属性\r\n     * @param {array} data 树数据\r\n     * @param {number} level 层级\r\n     */\n    getColumnLevel: function getColumnLevel(data) {\n      var _this2 = this;\n\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      data.forEach(function (item) {\n        if (Object.getOwnPropertyDescriptor(item, \"children\")) {\n          _this2.getColumnLevel(item[\"children\"], level + 1);\n        }\n\n        item.data[\"dep\"] = level;\n      });\n    },\n    renderContent: function renderContent(h, _ref) {\n      var _this3 = this;\n\n      var node = _ref.node,\n          data = _ref.data;\n      var widthArray = this.getColumnWidthArray(data.data.dep);\n      var columns = this.columns.map(function (column, index) {\n        return column.renderCell.call(_this3._renderProxy, h, {\n          node: node\n        }, widthArray[index]);\n      });\n      return h(\"span\", {\n        class: \"xboot__tr\",\n        style: {\n          height: \"40px\",\n          display: \"flex\"\n        }\n      }, columns);\n    }\n  }\n};",{"version":3,"sources":["xboot-tree-table.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div>\r\n    <xboot-tree-table-header :columns=\"columns\" :width-array=\"headerWidthArray\"></xboot-tree-table-header>\r\n    <Tree\r\n      :show-checkbox=\"showCheckbox\"\r\n      multiple\r\n      :empty-text=\"emptyText\"\r\n      :children-key=\"childrenKey\"\r\n      :data=\"treeData\"\r\n      :render=\"renderContent\"\r\n      :style=\"{width:treeWidth}\"\r\n    ></Tree>\r\n    <div style=\"display: none;\" :class=\"`__hidden`\">\r\n      <slot></slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport XbootTreeTableHeader from \"./xboot-tree-table-header\";\r\nimport { Tree } from \"iview\";\r\nimport \"./iview-reset.less\";\r\n\r\nconst BORDER_WIDTH = 1;\r\nconst ARROW_WIDTH = 24;\r\nconst CHECKBOX_WIDTH = 22;\r\nconst INDENT_DEFAULT = 18;\r\nconst EVENTS = [\r\n  \"on-select-change\",\r\n  \"on-check-change\",\r\n  \"on-toggle-expand\"\r\n];\r\nexport default {\r\n  name: \"xboot-tree-table\",\r\n  components: { XbootTreeTableHeader },\r\n  props: {\r\n    ...Tree.props,\r\n    treeWidth: { type: String, default: \"100%\" },\r\n    treeData: Array\r\n  },\r\n  data() {\r\n    return {\r\n      columns: [],\r\n      widthArray: []\r\n    };\r\n  },\r\n  mounted() {\r\n    this.getColumnLevel(this.treeData);\r\n  },\r\n  computed: {\r\n    headerWidthArray() {\r\n      // 没有设置宽度的列总数\r\n      const noWidthCount = this.columns.filter(n => !n.width).length;\r\n      // 已分配了多少像素宽度\r\n      let assignedWidthPx = 0;\r\n      // 已分配了百分比宽度\r\n      let assignedWidthPercent = 0;\r\n      // 计算已分配了多少宽度\r\n      this.columns.forEach(n => {\r\n        if (n.width) {\r\n          if (typeof n.width === \"number\" || n.width.includes(\"px\")) {\r\n            assignedWidthPx += Number.parseInt(n.width) + BORDER_WIDTH;\r\n          } else if (n.width.includes(\"%\")) {\r\n            assignedWidthPercent += Number.parseInt(n.width) + BORDER_WIDTH;\r\n          }\r\n        }\r\n      });\r\n      // 是否有checkbox的偏移值\r\n      let diff = CHECKBOX_WIDTH;\r\n      // 有checkbox，加上checkbox占用的宽度\r\n      if (this.showCheckbox) {\r\n        assignedWidthPx += CHECKBOX_WIDTH + ARROW_WIDTH;\r\n      } else {\r\n        assignedWidthPx += ARROW_WIDTH;\r\n        diff = 0;\r\n      }\r\n      // 计算每列应该展示的宽度\r\n      return this.columns.map((column, index) => {\r\n        // 有制定宽度\r\n        if (column.width) {\r\n          if (index === 0) {\r\n            // 第一列需要加上箭头和checkbox占用的宽度\r\n            return `calc(${column.width} + ${diff + ARROW_WIDTH}px)`;\r\n          } else {\r\n            // 最后一列需要减去每列的边框线宽度\r\n            if (index === this.columns.length - 1) {\r\n              return `calc(${column.width})`;\r\n            } else {\r\n              return `calc(${column.width})`;\r\n            }\r\n          }\r\n        } else {\r\n          if (index === 0) {\r\n            // 第一列需要加上箭头和checkbox占用的宽度\r\n            return `calc((100% - ${assignedWidthPercent}% - ${assignedWidthPx}px) / ${noWidthCount} + ${diff +\r\n              ARROW_WIDTH}px)`;\r\n          } else {\r\n            if (index === this.columns.length - 1) {\r\n              // 最后一列需要减去每列的边框线宽度\r\n              return `calc((100% - ${assignedWidthPercent}% - ${assignedWidthPx}px) / ${noWidthCount} - ${\r\n                this.columns.length\r\n              }px)`;\r\n            } else {\r\n              return `calc((100% - ${assignedWidthPercent}% - ${assignedWidthPx}px) / ${noWidthCount})`;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  },\r\n  methods: {\r\n    getColumnWidthArray(level) {\r\n      // 没有设置宽度的列总数\r\n      const noWidthCount = this.columns.filter(n => !n.width).length;\r\n      // 已分配了多少像素宽度\r\n      let assignedWidthPx = 0;\r\n      // 已分配了百分比宽度\r\n      let assignedWidthPercent = 0;\r\n\r\n      // 当前层级缩进的宽度\r\n      let indent = (level - 1) * (this.indent || INDENT_DEFAULT);\r\n\r\n      // 计算已分配了多少宽度\r\n      this.columns.forEach(n => {\r\n        if (n.width) {\r\n          if (typeof n.width === \"number\" || n.width.includes(\"px\")) {\r\n            assignedWidthPx += Number.parseInt(n.width) + BORDER_WIDTH;\r\n          } else if (n.width.includes(\"%\")) {\r\n            assignedWidthPercent += Number.parseInt(n.width) + BORDER_WIDTH;\r\n          }\r\n        }\r\n      });\r\n      // 计算每列应该展示的宽度\r\n      return this.columns.map((column, index) => {\r\n        // 如果属性指定了宽度\r\n        if (column.width) {\r\n          // 第一列需要减去树层级缩进的宽度\r\n          if (index === 0) {\r\n            return `calc(${column.width} - ${indent + 6}px)`;\r\n          } else {\r\n            return column.width;\r\n          }\r\n        } else {\r\n          // 如果列没有制定宽度，没宽度的列平均分配剩余的宽度，第一列需要减去树层级缩进的宽度\r\n          if (index === 0) {\r\n            return `calc((100% - ${assignedWidthPercent}% - ${assignedWidthPx -\r\n              indent}px) / ${noWidthCount} -  ${indent}px)`;\r\n          } else {\r\n            return `calc((100% - ${assignedWidthPercent}% - ${assignedWidthPx -\r\n              indent}px) / ${noWidthCount})`;\r\n          }\r\n        }\r\n      });\r\n    },\r\n    /**\r\n     * 给树添加层级属性\r\n     * @param {array} data 树数据\r\n     * @param {number} level 层级\r\n     */\r\n    getColumnLevel(data, level = 0) {\r\n      data.forEach(item => {\r\n        if (Object.getOwnPropertyDescriptor(item, \"children\")) {\r\n          this.getColumnLevel(item[\"children\"], level + 1);\r\n        }\r\n        item.data[\"dep\"] = level;\r\n      });\r\n    },\r\n    renderContent(h, { node, data }) {\r\n      let widthArray = this.getColumnWidthArray(data.data.dep);\r\n      const columns = this.columns.map((column, index) => {\r\n        return column.renderCell.call(\r\n          this._renderProxy,\r\n          h,\r\n          { node },\r\n          widthArray[index]\r\n        );\r\n      });\r\n      return h(\r\n        \"span\",\r\n        {\r\n          class: `xboot__tr`,\r\n          style: {\r\n            height: \"40px\",\r\n            display: \"flex\"\r\n          }\r\n        },\r\n        columns\r\n      );\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.xboot__tr {\r\n  align-items: center;\r\n\r\n  .xboot-tree-table__td:last-child {\r\n    border-right: none;\r\n  }\r\n}\r\n</style>\r\n"],"sourceRoot":"src\\views\\my-components\\xboot-tree-table"}]}
{"remainingRequest":"Z:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\babel-loader\\lib\\index.js!Z:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!Z:\\zeyu\\zeyu-plus\\xboot-plus-front\\src\\views\\message\\message.vue?vue&type=script&lang=js&","dependencies":[{"path":"Z:\\zeyu\\zeyu-plus\\xboot-plus-front\\src\\views\\message\\message.vue","mtime":1545792990763},{"path":"Z:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1545803981415},{"path":"Z:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"Z:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Cookies from \"js-cookie\";\nimport { getMessageSendData, editMessageSend, deleteMessageSend, getDictDataByType } from \"@/api/index\";\nexport default {\n  name: \"message_index\",\n  data: function data() {\n    var _this = this;\n\n    var markAsreadBtn = function markAsreadBtn(h, params) {\n      return h(\"Button\", {\n        props: {\n          icon: \"md-eye-off\",\n          size: \"small\"\n        },\n        on: {\n          click: function click() {\n            // 标记已读\n            var v = params.row; // 转换null为\"\"\n\n            for (var attr in v) {\n              if (v[attr] === null) {\n                v[attr] = \"\";\n              }\n            }\n\n            var str = JSON.stringify(v);\n            var data = JSON.parse(str);\n            data.status = 1;\n            _this.loading = true;\n            editMessageSend(data).then(function (res) {\n              _this.loading = false;\n\n              if (res.success === true) {\n                _this.$Message.success(\"操作成功\");\n\n                _this.unreadCount -= 1;\n                _this.hasreadCount += 1;\n\n                _this.$store.commit(\"setMessageCount\", _this.unreadCount);\n\n                _this.refreshMessage();\n              }\n            });\n          }\n        }\n      }, \"标为已读\");\n    };\n\n    var deleteMesBtn = function deleteMesBtn(h, params) {\n      return h(\"Button\", {\n        props: {\n          icon: \"md-trash\",\n          size: \"small\",\n          type: \"error\"\n        },\n        on: {\n          click: function click() {\n            // 移除\n            var v = params.row; // 转换null为\"\"\n\n            for (var attr in v) {\n              if (v[attr] === null) {\n                v[attr] = \"\";\n              }\n            }\n\n            var str = JSON.stringify(v);\n            var data = JSON.parse(str);\n            data.status = 2;\n            _this.loading = true;\n            editMessageSend(data).then(function (res) {\n              _this.loading = false;\n\n              if (res.success === true) {\n                _this.$Message.success(\"操作成功\");\n\n                _this.hasreadCount -= 1;\n                _this.recyclebinCount += 1;\n\n                _this.refreshMessage();\n              }\n            });\n          }\n        }\n      }, \"删除\");\n    };\n\n    var restoreBtn = function restoreBtn(h, params) {\n      return h(\"Button\", {\n        props: {\n          icon: \"md-redo\",\n          size: \"small\"\n        },\n        style: {\n          margin: \"0 5px 0 0\"\n        },\n        on: {\n          click: function click() {\n            // 还原\n            var v = params.row; // 转换null为\"\"\n\n            for (var attr in v) {\n              if (v[attr] === null) {\n                v[attr] = \"\";\n              }\n            }\n\n            var str = JSON.stringify(v);\n            var data = JSON.parse(str);\n            data.status = 1;\n            _this.loading = true;\n            editMessageSend(data).then(function (res) {\n              _this.loading = false;\n\n              if (res.success === true) {\n                _this.$Message.success(\"操作成功\");\n\n                _this.recyclebinCount -= 1;\n                _this.hasreadCount += 1;\n\n                _this.refreshMessage();\n              }\n            });\n          }\n        }\n      }, \"还原\");\n    };\n\n    var deleteRealBtn = function deleteRealBtn(h, params) {\n      return h(\"Button\", {\n        props: {\n          icon: \"md-trash\",\n          size: \"small\",\n          type: \"error\"\n        },\n        on: {\n          click: function click() {\n            // 彻底删除\n            var v = params.row;\n            _this.loading = true;\n            deleteMessageSend(v.id).then(function (res) {\n              _this.loading = false;\n\n              if (res.success === true) {\n                _this.$Message.success(\"操作成功\");\n\n                _this.recyclebinCount -= 1;\n\n                _this.refreshMessage();\n              }\n            });\n          }\n        }\n      }, \"彻底删除\");\n    };\n\n    return {\n      loading: true,\n      params: {\n        userId: JSON.parse(Cookies.get(\"userInfo\")).id,\n        status: 0,\n        pageNumber: 1,\n        // 当前页数\n        pageSize: 10,\n        // 页面大小\n        sort: \"createTime\",\n        // 默认排序字段\n        order: \"desc\" // 默认排序方式\n\n      },\n      total: 0,\n      totalUnread: 0,\n      totalRead: 0,\n      totalRemove: 0,\n      currentMesList: [],\n      unreadMesList: [],\n      hasreadMesList: [],\n      recyclebinList: [],\n      currentMessageType: \"unread\",\n      showMesTitleList: true,\n      unreadCount: 0,\n      hasreadCount: 0,\n      recyclebinCount: 0,\n      noDataText: \"暂无未读消息\",\n      mes: {\n        title: \"\",\n        time: \"\",\n        content: \"\"\n      },\n      dictMessageType: [],\n      mesTitleColumns: [{\n        type: \"index\",\n        width: 50,\n        align: \"center\"\n      }, {\n        title: \" \",\n        key: \"title\",\n        align: \"left\",\n        ellipsis: true,\n        render: function render(h, params) {\n          var re = \"\";\n\n          _this.dictMessageType.forEach(function (e) {\n            if (e.value == params.row.type) {\n              re = e.title;\n            }\n          });\n\n          return h(\"span\", [h(\"a\", {\n            style: {\n              margin: \"0 30px 0 0\"\n            },\n            on: {\n              click: function click() {\n                _this.showMesTitleList = false;\n                _this.mes.title = params.row.title;\n                _this.mes.time = params.row.createTime;\n\n                _this.getContent(params.row);\n              }\n            }\n          }, \"【\" + re + \"】 \" + params.row.title)]);\n        }\n      }, {\n        title: \" \",\n        key: \"time\",\n        align: \"center\",\n        width: 180,\n        render: function render(h, params) {\n          return h(\"span\", [h(\"Icon\", {\n            props: {\n              type: \"md-time\",\n              size: 12\n            },\n            style: {\n              margin: \"0 5px 3px 0\"\n            }\n          }), h(\"span\", params.row.createTime)]);\n        }\n      }, {\n        title: \" \",\n        key: \"asread\",\n        align: \"center\",\n        width: 190,\n        render: function render(h, params) {\n          if (_this.currentMessageType === \"unread\") {\n            return h(\"div\", [markAsreadBtn(h, params)]);\n          } else if (_this.currentMessageType === \"hasread\") {\n            return h(\"div\", [deleteMesBtn(h, params)]);\n          } else {\n            return h(\"div\", [restoreBtn(h, params), deleteRealBtn(h, params)]);\n          }\n        }\n      }]\n    };\n  },\n  methods: {\n    getDictMessageType: function getDictMessageType() {\n      var _this2 = this;\n\n      getDictDataByType(\"message_type\").then(function (res) {\n        if (res.success) {\n          _this2.dictMessageType = res.result;\n        }\n      });\n    },\n    changePage: function changePage(v) {\n      this.params.pageNumber = v;\n      this.refreshMessage();\n    },\n    changePageSize: function changePageSize(v) {\n      this.params.pageSize = v;\n      this.refreshMessage();\n    },\n    refreshMessage: function refreshMessage() {\n      var _this3 = this;\n\n      var status = 0;\n      var type = this.currentMessageType;\n\n      if (type === \"unread\") {\n        status = 0;\n      } else if (type === \"hasread\") {\n        status = 1;\n      } else {\n        status = 2;\n      }\n\n      this.params.status = status;\n      this.loading = true;\n      getMessageSendData(this.params).then(function (res) {\n        _this3.loading = false;\n\n        if (res.success === true) {\n          _this3.currentMesList = res.result.content;\n          _this3.total = res.result.totalElements;\n        }\n      });\n    },\n    initMessage: function initMessage() {\n      var _this4 = this;\n\n      this.params.status = 0;\n      getMessageSendData(this.params).then(function (res) {\n        if (res.success === true) {\n          _this4.unreadCount = res.result.totalElements;\n\n          _this4.initReadMessage();\n        }\n      });\n    },\n    initReadMessage: function initReadMessage() {\n      var _this5 = this;\n\n      this.params.status = 1;\n      getMessageSendData(this.params).then(function (res) {\n        if (res.success === true) {\n          _this5.hasreadCount = res.result.totalElements;\n\n          _this5.initRemoveMessage();\n        }\n      });\n    },\n    initRemoveMessage: function initRemoveMessage() {\n      var _this6 = this;\n\n      this.params.status = 2;\n      getMessageSendData(this.params).then(function (res) {\n        if (res.success === true) {\n          _this6.recyclebinCount = res.result.totalElements;\n\n          _this6.setCurrentMesType(\"unread\");\n        }\n      });\n    },\n    editMessage: function editMessage(status) {\n      var _this7 = this;\n\n      editMessageSend().then(function (res) {\n        if (res.success === true) {\n          _this7.$Message.success(\"操作成功\");\n        }\n      });\n    },\n    deleteMessage: function deleteMessage(id) {\n      var _this8 = this;\n\n      deleteMessageSend(id).then(function (res) {\n        if (res.success === true) {\n          _this8.$Message.success(\"删除成功\");\n        }\n      });\n    },\n    backMesTitleList: function backMesTitleList() {\n      this.showMesTitleList = true;\n    },\n    setCurrentMesType: function setCurrentMesType(type) {\n      if (this.currentMessageType !== type) {\n        this.showMesTitleList = true;\n      }\n\n      this.currentMessageType = type;\n\n      if (type === \"unread\") {\n        this.noDataText = \"暂无未读消息\";\n      } else if (type === \"hasread\") {\n        this.noDataText = \"暂无已读消息\";\n      } else {\n        this.noDataText = \"回收站无消息\";\n      }\n\n      this.params.pageNumber = 1;\n      this.refreshMessage();\n    },\n    getContent: function getContent(v) {\n      this.mes.content = v.content;\n    }\n  },\n  mounted: function mounted() {\n    this.initMessage();\n    this.getDictMessageType();\n  },\n  watch: {\n    // 监听路由变化通过id获取数据\n    $route: function $route(to, from) {\n      if (to.name === \"message_index\") {\n        this.initMessage();\n      }\n    }\n  }\n};",{"version":3,"sources":["message.vue"],"names":[],"mappings":"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","sourcesContent":["<style lang=\"less\">\r\n@import \"./message.less\";\r\n</style>\r\n\r\n<template>\r\n    <div class=\"message-main-con\">\r\n        <div class=\"message-mainlist-con\">\r\n            <div>\r\n                <Button @click=\"setCurrentMesType('unread')\" size=\"large\" long type=\"text\"><transition name=\"mes-current-type-btn\"><Icon v-show=\"currentMessageType === 'unread'\" type=\"md-checkmark\"></Icon></transition><span class=\"mes-type-btn-text\">未读消息</span><Badge class=\"message-count-badge-outer\" class-name=\"message-count-badge\" :count=\"unreadCount\"></Badge></Button>\r\n            </div>\r\n            <div>\r\n                <Button @click=\"setCurrentMesType('hasread')\" size=\"large\" long type=\"text\"><transition name=\"mes-current-type-btn\"><Icon v-show=\"currentMessageType === 'hasread'\" type=\"md-checkmark\"></Icon></transition><span class=\"mes-type-btn-text\">已读消息</span><Badge class=\"message-count-badge-outer\" class-name=\"message-count-badge\" :count=\"hasreadCount\"></Badge></Button>\r\n            </div>\r\n            <div>\r\n                <Button @click=\"setCurrentMesType('recyclebin')\" size=\"large\" long type=\"text\"><transition name=\"mes-current-type-btn\"><Icon v-show=\"currentMessageType === 'recyclebin'\" type=\"md-checkmark\"></Icon></transition><span class=\"mes-type-btn-text\">回收站</span><Badge class=\"message-count-badge-outer\" class-name=\"message-count-badge\" :count=\"recyclebinCount\"></Badge></Button>\r\n            </div>\r\n        </div>\r\n        <div class=\"message-content-con\">\r\n            <transition name=\"view-message\">\r\n                <div v-if=\"showMesTitleList\" class=\"message-title-list-con\">\r\n                    <Table ref=\"messageList\" :loading=\"loading\" :columns=\"mesTitleColumns\" :data=\"currentMesList\" :no-data-text=\"noDataText\"></Table>\r\n                    <Page :current=\"params.pageNumber\" :total=\"total\" :page-size=\"params.pageSize\" @on-change=\"changePage\" @on-page-size-change=\"changePageSize\" :page-size-opts=\"[5,10]\" size=\"small\" show-total show-elevator show-sizer class=\"page-fix\"></Page>\r\n                </div>\r\n            </transition>\r\n            <transition name=\"back-message-list\">\r\n                <div v-if=\"!showMesTitleList\" class=\"message-view-content-con\">\r\n                    <div class=\"message-content-top-bar\">\r\n                        <span class=\"mes-back-btn-con\"><Button type=\"text\" @click=\"backMesTitleList\"><Icon type=\"ios-arrow-back\" style=\"margin-bottom:3px\"></Icon>&nbsp;&nbsp;返回</Button></span>\r\n                        <h3 class=\"mes-title\">{{ mes.title }}</h3>\r\n                    </div>\r\n                    <p class=\"mes-time-con\">\r\n                        <Icon type=\"android-time\"></Icon>&nbsp;&nbsp;{{ mes.time }}</p>\r\n                    <div class=\"message-content-body\">\r\n                        <p class=\"message-content\" v-html=\"mes.content\">{{ mes.content }}</p>\r\n                    </div>\r\n                </div>\r\n            </transition>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport Cookies from \"js-cookie\";\r\nimport {\r\n  getMessageSendData,\r\n  editMessageSend,\r\n  deleteMessageSend,\r\n  getDictDataByType\r\n} from \"@/api/index\";\r\nexport default {\r\n  name: \"message_index\",\r\n  data() {\r\n    const markAsreadBtn = (h, params) => {\r\n      return h(\r\n        \"Button\",\r\n        {\r\n          props: {\r\n            icon: \"md-eye-off\",\r\n            size: \"small\"\r\n          },\r\n          on: {\r\n            click: () => {\r\n              // 标记已读\r\n              let v = params.row;\r\n              // 转换null为\"\"\r\n              for (let attr in v) {\r\n                if (v[attr] === null) {\r\n                  v[attr] = \"\";\r\n                }\r\n              }\r\n              let str = JSON.stringify(v);\r\n              let data = JSON.parse(str);\r\n              data.status = 1;\r\n              this.loading = true;\r\n              editMessageSend(data).then(res => {\r\n                this.loading = false;\r\n                if (res.success === true) {\r\n                  this.$Message.success(\"操作成功\");\r\n                  this.unreadCount -= 1;\r\n                  this.hasreadCount += 1;\r\n                  this.$store.commit(\"setMessageCount\", this.unreadCount);\r\n                  this.refreshMessage();\r\n                }\r\n              });\r\n            }\r\n          }\r\n        },\r\n        \"标为已读\"\r\n      );\r\n    };\r\n    const deleteMesBtn = (h, params) => {\r\n      return h(\r\n        \"Button\",\r\n        {\r\n          props: {\r\n            icon: \"md-trash\",\r\n            size: \"small\",\r\n            type: \"error\"\r\n          },\r\n          on: {\r\n            click: () => {\r\n              // 移除\r\n              let v = params.row;\r\n              // 转换null为\"\"\r\n              for (let attr in v) {\r\n                if (v[attr] === null) {\r\n                  v[attr] = \"\";\r\n                }\r\n              }\r\n              let str = JSON.stringify(v);\r\n              let data = JSON.parse(str);\r\n              data.status = 2;\r\n              this.loading = true;\r\n              editMessageSend(data).then(res => {\r\n                this.loading = false;\r\n                if (res.success === true) {\r\n                  this.$Message.success(\"操作成功\");\r\n                  this.hasreadCount -= 1;\r\n                  this.recyclebinCount += 1;\r\n                  this.refreshMessage();\r\n                }\r\n              });\r\n            }\r\n          }\r\n        },\r\n        \"删除\"\r\n      );\r\n    };\r\n    const restoreBtn = (h, params) => {\r\n      return h(\r\n        \"Button\",\r\n        {\r\n          props: {\r\n            icon: \"md-redo\",\r\n            size: \"small\"\r\n          },\r\n          style: {\r\n            margin: \"0 5px 0 0\"\r\n          },\r\n          on: {\r\n            click: () => {\r\n              // 还原\r\n              let v = params.row;\r\n              // 转换null为\"\"\r\n              for (let attr in v) {\r\n                if (v[attr] === null) {\r\n                  v[attr] = \"\";\r\n                }\r\n              }\r\n              let str = JSON.stringify(v);\r\n              let data = JSON.parse(str);\r\n              data.status = 1;\r\n              this.loading = true;\r\n              editMessageSend(data).then(res => {\r\n                this.loading = false;\r\n                if (res.success === true) {\r\n                  this.$Message.success(\"操作成功\");\r\n                  this.recyclebinCount -= 1;\r\n                  this.hasreadCount += 1;\r\n                  this.refreshMessage();\r\n                }\r\n              });\r\n            }\r\n          }\r\n        },\r\n        \"还原\"\r\n      );\r\n    };\r\n    const deleteRealBtn = (h, params) => {\r\n      return h(\r\n        \"Button\",\r\n        {\r\n          props: {\r\n            icon: \"md-trash\",\r\n            size: \"small\",\r\n            type: \"error\"\r\n          },\r\n          on: {\r\n            click: () => {\r\n              // 彻底删除\r\n              let v = params.row;\r\n              this.loading = true;\r\n              deleteMessageSend(v.id).then(res => {\r\n                this.loading = false;\r\n                if (res.success === true) {\r\n                  this.$Message.success(\"操作成功\");\r\n                  this.recyclebinCount -= 1;\r\n                  this.refreshMessage();\r\n                }\r\n              });\r\n            }\r\n          }\r\n        },\r\n        \"彻底删除\"\r\n      );\r\n    };\r\n    return {\r\n      loading: true,\r\n      params: {\r\n        userId: JSON.parse(Cookies.get(\"userInfo\")).id,\r\n        status: 0,\r\n        pageNumber: 1, // 当前页数\r\n        pageSize: 10, // 页面大小\r\n        sort: \"createTime\", // 默认排序字段\r\n        order: \"desc\" // 默认排序方式\r\n      },\r\n      total: 0,\r\n      totalUnread: 0,\r\n      totalRead: 0,\r\n      totalRemove: 0,\r\n      currentMesList: [],\r\n      unreadMesList: [],\r\n      hasreadMesList: [],\r\n      recyclebinList: [],\r\n      currentMessageType: \"unread\",\r\n      showMesTitleList: true,\r\n      unreadCount: 0,\r\n      hasreadCount: 0,\r\n      recyclebinCount: 0,\r\n      noDataText: \"暂无未读消息\",\r\n      mes: {\r\n        title: \"\",\r\n        time: \"\",\r\n        content: \"\"\r\n      },\r\n      dictMessageType: [],\r\n      mesTitleColumns: [\r\n        {\r\n          type: \"index\",\r\n          width: 50,\r\n          align: \"center\"\r\n        },\r\n        {\r\n          title: \" \",\r\n          key: \"title\",\r\n          align: \"left\",\r\n          ellipsis: true,\r\n          render: (h, params) => {\r\n            let re = \"\";\r\n            this.dictMessageType.forEach(e => {\r\n              if (e.value == params.row.type) {\r\n                re = e.title;\r\n              }\r\n            });\r\n            return h(\"span\", [\r\n              h(\r\n                \"a\",\r\n                {\r\n                  style: {\r\n                    margin: \"0 30px 0 0\"\r\n                  },\r\n                  on: {\r\n                    click: () => {\r\n                      this.showMesTitleList = false;\r\n                      this.mes.title = params.row.title;\r\n                      this.mes.time = params.row.createTime;\r\n                      this.getContent(params.row);\r\n                    }\r\n                  }\r\n                },\r\n                \"【\" + re + \"】 \" + params.row.title\r\n              )\r\n            ]);\r\n          }\r\n        },\r\n        {\r\n          title: \" \",\r\n          key: \"time\",\r\n          align: \"center\",\r\n          width: 180,\r\n          render: (h, params) => {\r\n            return h(\"span\", [\r\n              h(\"Icon\", {\r\n                props: {\r\n                  type: \"md-time\",\r\n                  size: 12\r\n                },\r\n                style: {\r\n                  margin: \"0 5px 3px 0\"\r\n                }\r\n              }),\r\n              h(\"span\", params.row.createTime)\r\n            ]);\r\n          }\r\n        },\r\n        {\r\n          title: \" \",\r\n          key: \"asread\",\r\n          align: \"center\",\r\n          width: 190,\r\n          render: (h, params) => {\r\n            if (this.currentMessageType === \"unread\") {\r\n              return h(\"div\", [markAsreadBtn(h, params)]);\r\n            } else if (this.currentMessageType === \"hasread\") {\r\n              return h(\"div\", [deleteMesBtn(h, params)]);\r\n            } else {\r\n              return h(\"div\", [\r\n                restoreBtn(h, params),\r\n                deleteRealBtn(h, params)\r\n              ]);\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    };\r\n  },\r\n  methods: {\r\n    getDictMessageType() {\r\n      getDictDataByType(\"message_type\").then(res => {\r\n        if (res.success) {\r\n          this.dictMessageType = res.result;\r\n        }\r\n      });\r\n    },\r\n    changePage(v) {\r\n      this.params.pageNumber = v;\r\n      this.refreshMessage();\r\n    },\r\n    changePageSize(v) {\r\n      this.params.pageSize = v;\r\n      this.refreshMessage();\r\n    },\r\n    refreshMessage() {\r\n      let status = 0;\r\n      let type = this.currentMessageType;\r\n      if (type === \"unread\") {\r\n        status = 0;\r\n      } else if (type === \"hasread\") {\r\n        status = 1;\r\n      } else {\r\n        status = 2;\r\n      }\r\n      this.params.status = status;\r\n      this.loading = true;\r\n      getMessageSendData(this.params).then(res => {\r\n        this.loading = false;\r\n        if (res.success === true) {\r\n          this.currentMesList = res.result.content;\r\n          this.total = res.result.totalElements;\r\n        }\r\n      });\r\n    },\r\n    initMessage() {\r\n      this.params.status = 0;\r\n      getMessageSendData(this.params).then(res => {\r\n        if (res.success === true) {\r\n          this.unreadCount = res.result.totalElements;\r\n          this.initReadMessage();\r\n        }\r\n      });\r\n    },\r\n    initReadMessage() {\r\n      this.params.status = 1;\r\n      getMessageSendData(this.params).then(res => {\r\n        if (res.success === true) {\r\n          this.hasreadCount = res.result.totalElements;\r\n          this.initRemoveMessage();\r\n        }\r\n      });\r\n    },\r\n    initRemoveMessage() {\r\n      this.params.status = 2;\r\n      getMessageSendData(this.params).then(res => {\r\n        if (res.success === true) {\r\n          this.recyclebinCount = res.result.totalElements;\r\n          this.setCurrentMesType(\"unread\");\r\n        }\r\n      });\r\n    },\r\n    editMessage(status) {\r\n      editMessageSend().then(res => {\r\n        if (res.success === true) {\r\n          this.$Message.success(\"操作成功\");\r\n        }\r\n      });\r\n    },\r\n    deleteMessage(id) {\r\n      deleteMessageSend(id).then(res => {\r\n        if (res.success === true) {\r\n          this.$Message.success(\"删除成功\");\r\n        }\r\n      });\r\n    },\r\n    backMesTitleList() {\r\n      this.showMesTitleList = true;\r\n    },\r\n    setCurrentMesType(type) {\r\n      if (this.currentMessageType !== type) {\r\n        this.showMesTitleList = true;\r\n      }\r\n      this.currentMessageType = type;\r\n      if (type === \"unread\") {\r\n        this.noDataText = \"暂无未读消息\";\r\n      } else if (type === \"hasread\") {\r\n        this.noDataText = \"暂无已读消息\";\r\n      } else {\r\n        this.noDataText = \"回收站无消息\";\r\n      }\r\n      this.params.pageNumber = 1;\r\n      this.refreshMessage();\r\n    },\r\n    getContent(v) {\r\n      this.mes.content = v.content;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initMessage();\r\n    this.getDictMessageType();\r\n  },\r\n  watch: {\r\n    // 监听路由变化通过id获取数据\r\n    $route(to, from) {\r\n      if (to.name === \"message_index\") {\r\n        this.initMessage();\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n"],"sourceRoot":"src\\views\\message"}]}
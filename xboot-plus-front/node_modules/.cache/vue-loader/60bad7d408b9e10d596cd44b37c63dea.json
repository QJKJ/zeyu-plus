{"remainingRequest":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\zeyu\\zeyu-plus\\xboot-plus-front\\src\\views\\my-components\\xboot-tree-table\\xboot-tree-table.vue?vue&type=style&index=0&id=218c0ce6&lang=less&scoped=true&","dependencies":[{"path":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\src\\views\\my-components\\xboot-tree-table\\xboot-tree-table.vue","mtime":1545792990765},{"path":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\postcss-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\less-loader\\dist\\cjs.js","mtime":1545803960479},{"path":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1545803981415},{"path":"D:\\zeyu\\zeyu-plus\\xboot-plus-front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.xboot__tr {\r\n  align-items: center;\r\n\r\n  .xboot-tree-table__td:last-child {\r\n    border-right: none;\r\n  }\r\n}\r\n",{"version":3,"sources":["xboot-tree-table.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkMA;AACA;;AAEA;AACA;AACA;AACA","file":"xboot-tree-table.vue","sourceRoot":"src\\views\\my-components\\xboot-tree-table","sourcesContent":["<template>\r\n  <div>\r\n    <xboot-tree-table-header :columns=\"columns\" :width-array=\"headerWidthArray\"></xboot-tree-table-header>\r\n    <Tree\r\n      :show-checkbox=\"showCheckbox\"\r\n      multiple\r\n      :empty-text=\"emptyText\"\r\n      :children-key=\"childrenKey\"\r\n      :data=\"treeData\"\r\n      :render=\"renderContent\"\r\n      :style=\"{width:treeWidth}\"\r\n    ></Tree>\r\n    <div style=\"display: none;\" :class=\"`__hidden`\">\r\n      <slot></slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport XbootTreeTableHeader from \"./xboot-tree-table-header\";\r\nimport { Tree } from \"iview\";\r\nimport \"./iview-reset.less\";\r\n\r\nconst BORDER_WIDTH = 1;\r\nconst ARROW_WIDTH = 24;\r\nconst CHECKBOX_WIDTH = 22;\r\nconst INDENT_DEFAULT = 18;\r\nconst EVENTS = [\r\n  \"on-select-change\",\r\n  \"on-check-change\",\r\n  \"on-toggle-expand\"\r\n];\r\nexport default {\r\n  name: \"xboot-tree-table\",\r\n  components: { XbootTreeTableHeader },\r\n  props: {\r\n    ...Tree.props,\r\n    treeWidth: { type: String, default: \"100%\" },\r\n    treeData: Array\r\n  },\r\n  data() {\r\n    return {\r\n      columns: [],\r\n      widthArray: []\r\n    };\r\n  },\r\n  mounted() {\r\n    this.getColumnLevel(this.treeData);\r\n  },\r\n  computed: {\r\n    headerWidthArray() {\r\n      // 没有设置宽度的列总数\r\n      const noWidthCount = this.columns.filter(n => !n.width).length;\r\n      // 已分配了多少像素宽度\r\n      let assignedWidthPx = 0;\r\n      // 已分配了百分比宽度\r\n      let assignedWidthPercent = 0;\r\n      // 计算已分配了多少宽度\r\n      this.columns.forEach(n => {\r\n        if (n.width) {\r\n          if (typeof n.width === \"number\" || n.width.includes(\"px\")) {\r\n            assignedWidthPx += Number.parseInt(n.width) + BORDER_WIDTH;\r\n          } else if (n.width.includes(\"%\")) {\r\n            assignedWidthPercent += Number.parseInt(n.width) + BORDER_WIDTH;\r\n          }\r\n        }\r\n      });\r\n      // 是否有checkbox的偏移值\r\n      let diff = CHECKBOX_WIDTH;\r\n      // 有checkbox，加上checkbox占用的宽度\r\n      if (this.showCheckbox) {\r\n        assignedWidthPx += CHECKBOX_WIDTH + ARROW_WIDTH;\r\n      } else {\r\n        assignedWidthPx += ARROW_WIDTH;\r\n        diff = 0;\r\n      }\r\n      // 计算每列应该展示的宽度\r\n      return this.columns.map((column, index) => {\r\n        // 有制定宽度\r\n        if (column.width) {\r\n          if (index === 0) {\r\n            // 第一列需要加上箭头和checkbox占用的宽度\r\n            return `calc(${column.width} + ${diff + ARROW_WIDTH}px)`;\r\n          } else {\r\n            // 最后一列需要减去每列的边框线宽度\r\n            if (index === this.columns.length - 1) {\r\n              return `calc(${column.width})`;\r\n            } else {\r\n              return `calc(${column.width})`;\r\n            }\r\n          }\r\n        } else {\r\n          if (index === 0) {\r\n            // 第一列需要加上箭头和checkbox占用的宽度\r\n            return `calc((100% - ${assignedWidthPercent}% - ${assignedWidthPx}px) / ${noWidthCount} + ${diff +\r\n              ARROW_WIDTH}px)`;\r\n          } else {\r\n            if (index === this.columns.length - 1) {\r\n              // 最后一列需要减去每列的边框线宽度\r\n              return `calc((100% - ${assignedWidthPercent}% - ${assignedWidthPx}px) / ${noWidthCount} - ${\r\n                this.columns.length\r\n              }px)`;\r\n            } else {\r\n              return `calc((100% - ${assignedWidthPercent}% - ${assignedWidthPx}px) / ${noWidthCount})`;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  },\r\n  methods: {\r\n    getColumnWidthArray(level) {\r\n      // 没有设置宽度的列总数\r\n      const noWidthCount = this.columns.filter(n => !n.width).length;\r\n      // 已分配了多少像素宽度\r\n      let assignedWidthPx = 0;\r\n      // 已分配了百分比宽度\r\n      let assignedWidthPercent = 0;\r\n\r\n      // 当前层级缩进的宽度\r\n      let indent = (level - 1) * (this.indent || INDENT_DEFAULT);\r\n\r\n      // 计算已分配了多少宽度\r\n      this.columns.forEach(n => {\r\n        if (n.width) {\r\n          if (typeof n.width === \"number\" || n.width.includes(\"px\")) {\r\n            assignedWidthPx += Number.parseInt(n.width) + BORDER_WIDTH;\r\n          } else if (n.width.includes(\"%\")) {\r\n            assignedWidthPercent += Number.parseInt(n.width) + BORDER_WIDTH;\r\n          }\r\n        }\r\n      });\r\n      // 计算每列应该展示的宽度\r\n      return this.columns.map((column, index) => {\r\n        // 如果属性指定了宽度\r\n        if (column.width) {\r\n          // 第一列需要减去树层级缩进的宽度\r\n          if (index === 0) {\r\n            return `calc(${column.width} - ${indent + 6}px)`;\r\n          } else {\r\n            return column.width;\r\n          }\r\n        } else {\r\n          // 如果列没有制定宽度，没宽度的列平均分配剩余的宽度，第一列需要减去树层级缩进的宽度\r\n          if (index === 0) {\r\n            return `calc((100% - ${assignedWidthPercent}% - ${assignedWidthPx -\r\n              indent}px) / ${noWidthCount} -  ${indent}px)`;\r\n          } else {\r\n            return `calc((100% - ${assignedWidthPercent}% - ${assignedWidthPx -\r\n              indent}px) / ${noWidthCount})`;\r\n          }\r\n        }\r\n      });\r\n    },\r\n    /**\r\n     * 给树添加层级属性\r\n     * @param {array} data 树数据\r\n     * @param {number} level 层级\r\n     */\r\n    getColumnLevel(data, level = 0) {\r\n      data.forEach(item => {\r\n        if (Object.getOwnPropertyDescriptor(item, \"children\")) {\r\n          this.getColumnLevel(item[\"children\"], level + 1);\r\n        }\r\n        item.data[\"dep\"] = level;\r\n      });\r\n    },\r\n    renderContent(h, { node, data }) {\r\n      let widthArray = this.getColumnWidthArray(data.data.dep);\r\n      const columns = this.columns.map((column, index) => {\r\n        return column.renderCell.call(\r\n          this._renderProxy,\r\n          h,\r\n          { node },\r\n          widthArray[index]\r\n        );\r\n      });\r\n      return h(\r\n        \"span\",\r\n        {\r\n          class: `xboot__tr`,\r\n          style: {\r\n            height: \"40px\",\r\n            display: \"flex\"\r\n          }\r\n        },\r\n        columns\r\n      );\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.xboot__tr {\r\n  align-items: center;\r\n\r\n  .xboot-tree-table__td:last-child {\r\n    border-right: none;\r\n  }\r\n}\r\n</style>\r\n"]}]}